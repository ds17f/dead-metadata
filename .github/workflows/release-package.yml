name: Build and Upload Release Package

on:
  release:
    types: [created]

permissions:
  contents: write  # Required to upload release assets

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0  # Fetch all history for git operations
    
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: scripts/.venv
        key: ${{ runner.os }}-python-${{ hashFiles('scripts/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-
    
    - name: Install dependencies
      run: |
        cd scripts
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract version from release tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Create data package
      run: |
        cd scripts
        source .venv/bin/activate
        cd ..
        make package-release VERSION=${{ steps.version.outputs.version }}
    
    - name: Find generated package
      id: package
      run: |
        PACKAGE_FILE=$(find . -name "data.zip" -type f)
        if [ -z "$PACKAGE_FILE" ]; then
          echo "No package file found matching pattern data.zip"
          exit 1
        fi
        echo "package_path=$PACKAGE_FILE" >> $GITHUB_OUTPUT
        echo "package_name=$(basename $PACKAGE_FILE)" >> $GITHUB_OUTPUT
        echo "Found package: $PACKAGE_FILE"
    
    - name: Upload package to release
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.package.outputs.package_path }}
        asset_name: ${{ steps.package.outputs.package_name }}
        asset_content_type: application/zip
    
    - name: Display package info
      run: |
        echo "Successfully uploaded ${{ steps.package.outputs.package_name }} to release ${{ github.event.release.tag_name }}"
        ls -lh ${{ steps.package.outputs.package_path }}